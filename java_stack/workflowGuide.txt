CREATE THE APPLICATION

1.	Create an empty folder or directory wherever you want your Spring Boot projects to be located at. For example, you can create a folder in your desktop named "springProjects".

2.	Open STS and choose your workspace.

3.	On the left-hand side in the Package Explorer, right click and hover over "new" and click on 'Spring Starter Project'

4.	In the 'New Spring Starter Project' window, we must fill out information about our project.

	The information that you provide here is crucial for sharing your project. Here are some conventions:

	Name Field: <yourprojectname>. This will be your project name all lowercased.
	Group Field: com.<company>.<yourprojectname>. This will be a combination of your company and your project. For now, you can put your name in its place.
	Artifact Field: <yourprojectname>
	Description Field: Short description about your project
	Package Field: Same as the group field.

5.	After clicking next, we will see a window to install our dependencies. For now, search for web and select it. This is how Spring Boot uses Spring MVC!
	(1) spring web
	(2) spring boot DevTools

6.	Click Finish, and once it downloads and configures all dependencies, you will have a Spring Boot app ready to run. At first, this process can take a few minutes; 
	however, subsequent apps will take much less time to finish.

RUN THE APPLICATION

1.	Right Click on the application (firstproject) -> Click on "Run As" -> Click on "Spring Boot App"

2.	Once you see the server running in the console, you can visit 'localhost:8080' to see an error page. Don't worry, this is good. It is correctly running.

FOLDER STRUCTURE

	The src directory is the main location where we will be writing our code in. Inside src, we have the main and test directories. Below is the tree structure of the src folder.
	In STS, the folder structure of our application is broken down into smaller parts in the Package Explorer. In src/main/java, we have its packages and files and in 
	src/main/resources, we have a couple of folders for static files and templates.

	├── src
	│   ├── main (where MVC, templates, and static resources will go)
	│   │   ├── java 
	│   │   │   └── com
	│   │   │       └── codingdojo
	│   │   │           └── firstproject
	│   │   │               └── FirstprojectApplication.java
	│   │   └── resources
	│   │       ├── application.properties
	│   │       ├── static
	│   │       └── templates
	│   └── test (where test code will go)
	│       └── java
	│           └── com
	│               └── codingdojo
	│                   └── firstproject
	│                       └── FirstprojectApplicationTests.java

CODE

Open the FirstprojectApplication.java file inside the firstproject package in src/main/java. To make our app work, we need to add the following to this file:

@RestController and @RequestMapping("/") annotations.
Import the dependencies for the annotations to work.
The method that will respond to the request of the root route.
Before adding our code, take a look at your current code in the file. Now, compare it to the code below. By the way, we have commented all the new lines that you will be adding yourself.

	FirstprojectApplication.java

	package com.codingdojo.firstproject;

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	// 2. Importing dependencies
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;

	@SpringBootApplication
	// 1. Annotation
	@RestController
	public class FirstprojectApplication {
        	public static void main(String[] args) {
                	SpringApplication.run(FirstprojectApplication.class, args);
        	}
        
        	// 1. Annotation
        	@RequestMapping("/")
        	// 3. Method that maps to the request route above
        	public String hello() { // 3
                	return "Hello World!";
        	}
	}
	Restart your server and navigate to localhost:8080 in your browser. You should see the message "Hello World!" on you screen.


FOLLOWING ALONG IN HIS DEMO FROM W2D5

1.	Open the msql workbench to create shcema
2.	name it and use UTF-8
3.	go into STS and create a new "spring starter project" --> you can name the project
4. 	install dependencies -->
5.	go to the pom.xml file and install other dependencies --> jstl, tomcat, validations
6.	create the web-inf folder and file
7. 	setup the application.properties file
8.	run as a spring boot app
9.	go to src/main/java --> create new package from the given file and create the main controller
10.	go to the web-inf folder and add a new index.jsp file that will talk to the main controller and the index method that we will make
11. 	this main controller file will have annotations like "@Controller" and then our "@GetMapping" or "@RequestMapping"
12.	add a new package called .models
13.	add a new class off that package^ and this file will be where we create a class contstructor
14.	when you make models --> we need to make a new package at the same level as our models package that will be .repos
15.	we will mirror our models classes with repo classes and these methods will extend others
16.	we now new to make "services" that will interact between these --> 